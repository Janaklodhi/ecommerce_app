c
n
!user.confirmed
user
n
user.nil?
n
user = User.find_by(email: params[:user][:email])
params
c
params
c
user = User.find_by(email: params[:user][:email])
c
params[:user][:email]
params[:user]
params
c
params[:token]
params
c
self.confirmation_token = SecureRandom.urlsafe_base64
c
params[:users][:token]
params[:token]
params
c
user = User.find_by(confirmation_token: params[:token])
c
user
c
@user = user
user
c
@user.password
@user.email
@user = user
user
c
self.confirmation_token = SecureRandom.urlsafe_base64
c
self.confirmation_token = SecureRandom.urlsafe_base64
self.confirmation_token
self.confirmation_token?
self
c
n
@user = user
user
c
n
self.confirmation_token = SecureRandom.urlsafe_base64
self
c
@current_user
c
@current_user.articles.ids
@current_user.articles
@current_user
c
@current_user
c
@article = Article.find(params[:id])
c
@article = Article.find(params[:id])
parmas[:id]
c
product_params
product
c
user.role
user
c
user.role?
user.role
user
c
user.role
user
c
user.update(role: "client")
user.role
user
c
user.role?
user.role
user.role?
user
c
n
user
c
user
c
@product
n
product_params
c
@comment.save
@comment
n
@article = @current_user.articles.find(params[:comment][:article_id])
@article.comments
@article
n
@article = @current_user.articles.find(params[:comment][:article_id])
c
params.require(:comment).permit(:commenter, :body, :article_id).merge(user_id: user.id)
n
user.id
user
user = authentication
c
params.require(:comment).permit(:commenter, :body, :user_id, :article_id)
params.require(:comment).permit(:commenter, :body, :user_id, :article_id
c
params
c
params.require(:comment).permit(:commenter, :body, :user_id, :article_id)
n
@comment = @article.comments.new(comments_params)
n
@article = @current_user.articles.find(params[:comment][:article_id])
c
 params.require(:comment).permit(:commenter, :body, :user_id)
c
comments_params
@article.comments.new
@article.comments
@article
n
@article = @current_user.articles.find(params[:comment][:article_id])
@current_user
c
@article = @current_user.articles.find(params[:comment][:article_id])
@current_user.articles
@current_user.articels
@current_user
c
@current_user.articles.params[:comment][:article_id]
@current_user.articles
@current_user
c
@article = Article.find(params[:comment][:article_id])
c
@current_user.comments.new
@current_user.comments
@current_user
c
n
user = User.find_by(id: user_id) if user_id.present?
n
token
n
c
@comment = @current_user.comments.new(comments_params)
c
@current_user
c
@current_user
c
@current_user.Article.includes(:comments)
@current_user
c
user = User.find_by(id: user_id) if user_id.present?
n
user_id = user_data_hash['user_data'] if user_data_hash.present?
n
user_data_hash = user_data.first
n
user_data = decode_user_data(token)
n
token
n
token = request.headers[:token]
c
user_id = user_data_hash['user_data'] if user_data_hash.present?
user_id = user_data_hash['user_id'] if user_data_hash.present?
user_data_hash = user_data.first
user_id = user_data_hash['user_id'] if user_data_hash.present?
n
user_data_hash = user_data.first
n
 user_data = decode_user_data(token)
n
token = request.headers[:token]
c
user_id = user_data['user_id'].to_i if user_data.present?
user_id = user_data['user_id'] if user_data.present?
user_data.present?
user_data
user_data = decode_user_data(token)
n
user_data = decode_user_data(token)
n
token
n
token = request.headers[:token]
c
obj
n
user_data
n
user_data = decode_user_data(token)
n
token
n
token = request.headers[:token]
user_data_hash = user_data.first
user_id = user_data_hash['user_id'].to_i if user_data_hash.present?
s=user_data.first
user_data.first
user_data
User.find(user_data['user_data'].to_i)
user_data
User.find(user_data['user_id'].to_i) if user_data.present?
 User.find(user_data['user_id'].to_i)
 User.find(user_data['user_id'])
user_data.present?
user_data
User.find(user_data['user_id']).to_i if user_data.present?
User.find(user_data['user_id']) if user_data.present?
n
user_data = decode_user_data(token)
n
token
n
token = request.headers[:token]
c
@current_user = current_user
c
@current_user = current_user
c
decode_user_data(token)
n
token
n
token
token = request.headers[:token]
request.headers[:token]
@current_user ||= begin token = request.headers[:token])
@current_user ||= begin token = request.headers[:token]
c
@articles = Article.includes(:comments)
c
user = User.find_by(id: user_data) if user_data.present?
user = User.find_by(id: user_data["id"].to_i) if user_data.present?
user = User.find_by(id: user_data["id"]) if user_data.present?
n
user_data = decode_data[0]["user_data"] if decode_data.present?
n
decode_data = decode_user_data(request.headers["token"])
c
user = User.find_by(id: user_data["id"].to_i)
user=User.find(id: user_data["id"])
user=User.find(id: user_data.id)
